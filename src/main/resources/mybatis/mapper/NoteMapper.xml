<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.stone.noteManage.repository.NoteMapper">

    <insert id="createNote" parameterType="note">
        <selectKey keyProperty="noteIndex" resultType="Integer" order="BEFORE">
            SELECT IFNULL(MAX(n.noteIndex), 0) FROM note n WHERE createUserId = #{createUserId} AND status = 1
        </selectKey>
        INSERT INTO note
        VALUES (#{id}, #{noteName}, #{noteGenreId}, #{noteFileId}, #{createUserId}, #{createTime},
            #{modifyTime}, #{noteIndex} + 1, #{status, typeHandler = dataStatusHandler})
    </insert>

    <insert id="createNoteContent" parameterType="noteContent">
        INSERT INTO noteContent
        VALUES (#{id}, #{noteId}, #{index}, #{content})
    </insert>

    <insert id="createNoteContents" parameterType="list">
        INSERT INTO noteContent
        VALUES
        <foreach collection="list" item="item" separator=",">
            (#{item.id}, #{item.noteId}, #{item.index}, #{item.content})
        </foreach>
    </insert>

    <insert id="createNoteGenre" parameterType="noteGenre">
        INSERT INTO noteGenre
        VALUES (#{id}, #{userId}, #{typeName})
    </insert>

    <insert id="createNoteFile" parameterType="noteFile">
        INSERT INTO noteFile
        VALUES (#{id}, #{noteId}, #{fileName}, #{filePath}, #{fileContentType}, #{fileType})
    </insert>

    <select id="getGenreByName" resultType="noteGenre">
        SELECT * FROM noteGenre
        WHERE userId = #{userId}
        AND typeName = #{name}
    </select>

    <select id="getNoteById" resultMap="noteMap">
        SELECT n.id AS note_id, n.*,
            g.id AS genre_id, g.*,
            f.id AS file_id, f.*,
            c.id AS content_id, c.*,
            u.userName AS createUserName
        FROM note n
        INNER JOIN noteGenre g
        ON n.noteGenreId = g.id AND g.userId = #{userId}
        INNER JOIN user u
        ON n.createUserId = u.id
        LEFT JOIN noteFile f
        ON n.id = f.noteId
        LEFT JOIN noteContent c
        ON n.id = c.noteId
        WHERE n.createUserId = #{userId}
        AND n.id = #{noteId}
        AND n.status = 1
        ORDER BY c.index ASC
    </select>

    <select id="getNotesByUserId" resultMap="noteMap">
        SELECT n.id AS note_id, n.*,
            g.id AS genre_id, g.*
        FROM note n
        INNER JOIN noteGenre g
        ON n.noteGenreId = g.id AND g.userId = #{0}
        WHERE n.createUserId = #{0}
        AND n.status = 1
        ORDER BY n.noteGenreId, n.noteIndex DESC, n.createTime DESC
    </select>

    <resultMap id="noteMap" type="note">
        <id column="id" property="id"/>
        <id column="note_id" property="id"/>
        <result column="noteName" property="noteName"/>
        <result column="noteGenreId" property="noteGenreId"/>
        <result column="noteFileId" property="noteFileId"/>
        <result column="createUserId" property="createUserId"/>
        <result column="createUserName" property="createUserName"/>
        <result column="createTime" property="createTime"/>
        <result column="modifyTime" property="modifyTime"/>
        <result column="noteIndex" property="noteIndex"/>
        <result column="status" property="status" typeHandler="dataStatusHandler"/>
        <association property="noteGenre" javaType="noteGenre">
            <id column="genre_id" property="id"/>
            <result column="userId" property="userId"/>
            <result column="typeName" property="typeName"/>
        </association>
        <association property="noteFile" javaType="noteFile">
            <id column="file_id" property="id"/>
            <result column="noteId" property="noteId"/>
            <result column="fileName" property="fileName"/>
            <result column="filePath" property="filePath"/>
            <result column="fileContentType" property="fileContentType"/>
            <result column="fileType" property="fileType"/>
        </association>
        <!--<collection property="contents" javaType="List" ofType="noteContent">
            <id column="content_id" property="id"/>
            <result column="noteId" property="noteId"/>
            <result column="index" property="index"/>
            <result column="content" property="content"/>
        </collection>-->
        <collection property="contents" javaType="List" ofType="noteContent" resultMap="contentMap"/>
    </resultMap>
    
    <resultMap id="contentMap" type="noteContent">
        <id column="content_id" property="id"/>
        <result column="noteId" property="noteId"/>
        <result column="index" property="index"/>
        <result column="content" property="content"/>
    </resultMap>

    <update id="noteDelete">
        UPDATE note SET status = 0
        WHERE createUserId = #{userId}
        AND id = #{noteId}
    </update>

    <select id="getNotesByUserIdAndGenre" resultMap="noteMap">
        SELECT *
        FROM note n
        WHERE n.createUserId = #{userId}
        AND n.status = 1
        AND n.noteGenreId = (SELECT noteGenreId FROM note WHERE id = #{noteId})
        ORDER BY n.noteIndex ASC
    </select>

    <update id="noteIndexModify" parameterType="List">
        <foreach collection="list" item="item" separator=";">
            UPDATE note SET noteIndex = #{item.noteIndex} WHERE id = #{item.id}
        </foreach>
    </update>

</mapper>