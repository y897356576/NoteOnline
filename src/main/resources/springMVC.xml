<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
	   http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">


    <!-- 扫描控制器 -->
    <context:component-scan base-package="com.stone" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
    </context:component-scan>

    <!-- spring mvc 注解; 支持处理器映射器、处理器适配器的配置 -->
    <mvc:annotation-driven>
        <!-- spring mvc 消息转换 -->
        <mvc:message-converters>
            <!-- 设置HttpMessageConverter处理String类型数据时采用的编码 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>
            <!-- 用来处理json格式转换 -->
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- spring mvc 静态资源 -->
    <!-- 在web.xml内springMVC的<url-pattern>为/时，web下的文件夹，配置<mvc:resource>访问这些静态资源时不被拦截 -->
    <!--https://www.cnblogs.com/dflmg/p/6393416.html-->
    <!--<mvc:resources location="/common/" mapping="/common/**" />
    <mvc:resources location="/admin/" mapping="/admin/**" />
    <mvc:resources location="/front/" mapping="/front/**" />
    <mvc:resources location="/html/" mapping="/html/**" />
    <mvc:resources location="/image/" mapping="/image/**" />
    <mvc:resources location="/js/" mapping="/js/**" /> &lt;!&ndash; 不设置此处js无法被引用 &ndash;&gt;
    <mvc:resources location="/css/" mapping="/css/**" /> &lt;!&ndash; 不设置此处css无法被引用 &ndash;&gt;-->

    <!-- 访问静态资源时不被拦截 -->
    <!-- 与上面的 mvc:resources 效果类似，都配置时先执行上面的 -->
    <!-- 在web.xml内springMVC的<url-pattern>为/时，DispatcherServlet中的静态资源请求会被转由Web应用服务器默认的Servlet处理，防止静态资源被拦截 -->
    <mvc:default-servlet-handler />

    <!-- spring MVC的试图解析器ViewResolver JSP模板 -->
    <!-- 根据客户端的不同的请求决定不同的view进行响应, 如 /test/1.json /test/1.xml -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="contentNegotiationManager">
            <bean class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
                <!-- 设置为true以忽略对 Accept Header 的支持(因浏览器不同AcceptHeader有可能不同) -->
                <property name="ignoreAcceptHeader" value="true"/>
                <!-- 在没有扩展名时即: "/test/1" 时的默认展现形式 -->
                <property name="defaultContentType" value="text/html"/>
                <!-- 扩展名至mimeType的映射,即 /1.json => application/json -->
                <property name="mediaTypes">
                    <map>
                        <entry key="json" value="application/json"/>
                        <entry key="xml" value="application/xml"/>
                        <entry key="html" value="text/html"/>
                        <entry key="atom" value="application/atom+xml"/>
                    </map>
                </property>
            </bean>
        </property>
        <property name="defaultViews">
            <list>
                <!-- for application/json -->
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/>
            </list>
        </property>
    </bean>

    <!-- 配置视图解析器，前缀与后缀 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--<property name="viewClass">
            <value>org.springframework.web.servlet.view.InternalResourceView</value>//默认配置
        </property>-->
        <property name="cache" value="false" />
        <!--<property name="prefix" value=""/>-->
        <!--<property name="suffix" value=".jsp"/>-->
        <!-- 视图的优先级，0为最优先 -->
        <property name="order" value="10" />
    </bean>

    <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" valcom.stone.common.viewResolverlver.HtmlViewResolver" />
        <property name="cache" value="false" />
        <property name="prefix" value="/html"/>
        <property name="suffix" value=".html"/>
        &lt;!&ndash; 视图的优先级，0为最优先 &ndash;&gt;
        <property name="order" value="0" />
    </bean>-->

     <!--配置spring MVC的拦截器-->
    <!-- 配置多个拦截器时，preHandle顺序执行，另两个倒序执行 -->
    <!-- preHandle返回true后afterCompletion必定执行，返回false另两个都不执行 -->
    <!--<mvc:interceptors>
        <mvc:interceptor>
            &lt;!&ndash; 拦截所有 &ndash;&gt;
            <mvc:mapping path="/**"/>
            &lt;!&ndash; exclude-mapping 不拦截的地址 &ndash;&gt;
            <mvc:exclude-mapping path="/admin/login" />
            <mvc:exclude-mapping path="/front/login" />
            <bean clacom.stone.core.interceptorptor.LoginInterceptor"></bean>
        </mvc:interceptor>
        <mvc:interceptor>
            &lt;!&ndash; 拦截所有 &ndash;&gt;
            <mvc:mapping path="/**"/>
            <bean clacom.stone.core.interceptorptor.LoginInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>-->

</beans>